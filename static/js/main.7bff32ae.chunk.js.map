{"version":3,"sources":["containers/SettingContainer/SettingContainer.js","services/alert.service.js","Utils/Common.js","components/ShipAlert.js","components/Game/OceanBlock.js","components/Game/NotificationSection.js","components/Game/ActionSection.js","components/ShipConfirmation/ShipConfirmation.js","GlobalReducer.js","GlobalContext.js","containers/GameContainer/GameContainer.js","containers/RecordsContainer/RecordsContainer.js","App.js","reportWebVitals.js","index.js"],"names":["SettingContainer","useState","numberOfAttempts","setNumberOfAttempts","showShips","setShowShips","validated","setValidated","history","useHistory","Row","Col","className","Form","noValidate","onSubmit","event","currentTarget","checkValidity","preventDefault","stopPropagation","push","Group","Label","Control","as","value","aria-label","onChange","target","required","size","Feedback","type","Check","label","checked","Button","variant","block","alertSubject","Subject","defaultId","alertService","onAlert","id","asObservable","pipe","filter","x","success","message","options","alert","AlertType","error","info","warn","clear","next","abcArray","range","start","end","Array","fill","map","_","idx","diffBetweenArray","baseArray","removeArray","item","some","fItem","OceanBlock","index","rowName","columNumber","isShip","isActiveShip","shipKey","isAttacked","this","toString","ShipAlert","fade","alerts","setAlerts","removeAlert","alertWithFade","setTimeout","cssClasses","classes","alertTypeClass","join","useEffect","subscription","subscribe","autoClose","filteredAlerts","keepAfterRouteChange","forEach","historyUnlisten","listen","unsubscribe","length","onClick","dangerouslySetInnerHTML","__html","defaultProps","displayShips","fire","display","NotificationSection","isInfinitive","thereIsActiveShipBlocks","currentAttempts","Alert","Heading","ActionSection","restartGame","ShipConfirmation","props","show","body","title","onCancel","onAccept","Modal","onHide","Header","closeButton","Title","Body","Footer","initialState","games","reducer","state","payload","Error","GlobalContext","createContext","GlobalContextProvider","children","useReducer","dispatch","Provider","loadGames","globalState","PropTypes","object","GameContainer","oceanBlocks","setOceanBlocks","setIsInfinitive","setCurrentAttempts","setThereIsActiveShipBlocks","setDisplayShips","showModal","setShowModal","modalBody","setModalBody","gameId","setGameId","useContext","useParams","attemptsParam","attempts","alertOptions","IterateShips","Ships","BlockUniverse","SuperName","Ship","setShipProperties","shipBlocks","SubName","blockIndex","GetShipByTailSize","initialBlocks","tailSize","result","shipSearchingDefaultResult","spaceStartIndex","Math","floor","random","ShipApplicant","validationDefaultResult","shipSize","validationStep","currentStepValue","generateGroupOfShips","count","baseNumbers","step","groupResult","currentBaseNumbers","from","load","parseInt","globalGames","currentId","currentGame","attemps","restOfAttemps","addNewGame","shipAmount","Object","create","generateShipContainers","keys","initialOceanBlocks","number","letter","letterIndex","base","letterBase","init","getRowNameOrderNumber","Containers","container","IterateShipContainers","loseMessage","handleShowModal","newOceanBlocks","currentBlock","stepAttempts","blockUniverse","findDestroyShip","currentThereIsActiveShips","winMessage","updateCurrentGame","Card","style","padding","Display","RecordsContainer","setGames","slice","reverse","Table","striped","bordered","hover","game","App","Container","fluid","Nav","defaultActiveKey","Item","to","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7bff32ae.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n\nconst SettingContainer = () => {\n  const [numberOfAttempts, setNumberOfAttempts] = useState();\n  const [showShips, setShowShips] = useState(false);\n  const [validated, setValidated] = useState(false);\n\n  let history = useHistory();\n  const goToGame = (event) => {\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n      setValidated(true);\n    } else {\n      history.push(`/game/${numberOfAttempts}/${showShips ? 1 : 0}`);\n    }\n  };\n  const numberChange = (event) => {\n    setNumberOfAttempts(event.target.value);\n  };\n  return (\n    <>\n      <Row>\n        <Col className=\"mt-3\">\n          <p className=\"font-weight-bold setting-title\">\n            Configure BattleShip Game\n          </p>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Form noValidate validated={validated} onSubmit={goToGame}>\n            <Form.Group>\n              <Form.Label>Level</Form.Label>\n              <Form.Control\n                as=\"select\"\n                value={numberOfAttempts}\n                aria-label=\"Default select example\"\n                onChange={numberChange}\n                required\n                size=\"lg\"\n              >\n                <option value=\"\">Level</option>\n                <option value=\"0\">Easy</option>\n                <option value=\"100\">Medium</option>\n                <option value=\"50\">Hard</option>\n              </Form.Control>\n              <Form.Control.Feedback type=\"invalid\">\n                Please provide a valid level.\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group>\n              <Form.Check\n                type=\"checkbox\"\n                label=\"Show ships\"\n                checked={showShips}\n                onChange={() => setShowShips(!showShips)}\n              />\n            </Form.Group>\n            <Button variant=\"primary\" type=\"submit\" size=\"lg\" block>\n              Enter\n            </Button>\n          </Form>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default SettingContainer;\n","import { Subject } from \"rxjs\";\nimport { filter } from \"rxjs/operators\";\n\nconst alertSubject = new Subject();\nconst defaultId = \"default-alert\";\n\nexport const alertService = {\n  onAlert,\n  success,\n  error,\n  info,\n  warn,\n  alert,\n  clear,\n};\n\nexport const AlertType = {\n  Success: \"Success\",\n  Error: \"Error\",\n  Info: \"Info\",\n  Warning: \"Warning\",\n};\n\n// enable subscribing to alerts observable\nfunction onAlert(id = defaultId) {\n  return alertSubject.asObservable().pipe(filter((x) => x && x.id === id));\n}\n\n// convenience methods\nfunction success(message, options) {\n  alert({ ...options, type: AlertType.Success, message });\n}\n\nfunction error(message, options) {\n  alert({ ...options, type: AlertType.Error, message });\n}\n\nfunction info(message, options) {\n  alert({ ...options, type: AlertType.Info, message });\n}\n\nfunction warn(message, options) {\n  alert({ ...options, type: AlertType.Warning, message });\n}\n\n// core alert method\nfunction alert(alert) {\n  alert.id = alert.id || defaultId;\n  alertSubject.next(alert);\n}\n\n// clear alerts\nfunction clear(id = defaultId) {\n  alertSubject.next({ id });\n}\n","class OceanBlock {\n  constructor(\n    index,\n    rowName,\n    columNumber,\n    isShip,\n    isActiveShip,\n    shipKey,\n    isAttacked\n  ) {\n    this.index = index;\n    this.rowName = rowName;\n    this.columNumber = columNumber || 0;\n    this.isShip = isShip || false;\n    this.isActiveShip = isActiveShip || false;\n    this.shipKey = shipKey || \"0000\";\n    this.isAttacked = isAttacked || false;\n  }\n\n  Display() {\n    return `${this.rowName}${this.columNumber.toString()}`;\n  }\n}\n\nexport const abcArray = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"];\n\nexport const range = (start, end) => {\n  return Array(end - start + 1)\n    .fill()\n    .map((_, idx) => start + idx);\n};\n\nexport const diffBetweenArray = (baseArray, removeArray) =>\n  baseArray.filter((item) => !removeArray.some((fItem) => fItem === item));\n\nexport default OceanBlock;\n","import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { alertService, AlertType } from \"../services\";\n\nconst propTypes = {\n  id: PropTypes.string,\n  fade: PropTypes.bool,\n};\n\nconst defaultProps = {\n  id: \"default-alert\",\n  fade: true,\n};\n\nfunction ShipAlert({ id, fade }) {\n  const history = useHistory();\n  const [alerts, setAlerts] = useState([]);\n\n  useEffect(() => {\n    // subscribe to new alert notifications\n    const subscription = alertService.onAlert(id).subscribe((alert) => {\n      // clear alerts when an empty alert is received\n      if (!alert.message) {\n        setAlerts((alerts) => {\n          // filter out alerts without 'keepAfterRouteChange' flag\n          const filteredAlerts = alerts.filter((x) => x.keepAfterRouteChange);\n\n          // remove 'keepAfterRouteChange' flag on the rest\n          filteredAlerts.forEach((x) => delete x.keepAfterRouteChange);\n          return filteredAlerts;\n        });\n      } else {\n        // add alert to array\n        setAlerts((alerts) => [...alerts, alert]);\n\n        // auto close alert if required\n        if (alert.autoClose) {\n          setTimeout(() => removeAlert(alert), 3000);\n        }\n      }\n    });\n\n    // clear alerts on location change\n    const historyUnlisten = history.listen(() => {\n      alertService.clear(id);\n    });\n\n    // clean up function that runs when the component unmounts\n    return () => {\n      // unsubscribe & unlisten to avoid memory leaks\n      subscription.unsubscribe();\n      historyUnlisten();\n    };\n  }, []);\n\n  function removeAlert(alert) {\n    if (fade) {\n      // fade out alert\n      const alertWithFade = { ...alert, fade: true };\n      setAlerts((alerts) =>\n        alerts.map((x) => (x === alert ? alertWithFade : x))\n      );\n\n      // remove alert after faded out\n      setTimeout(() => {\n        setAlerts((alerts) => alerts.filter((x) => x !== alertWithFade));\n      }, 250);\n    } else {\n      // remove alert\n      setAlerts((alerts) => alerts.filter((x) => x !== alert));\n    }\n  }\n\n  function cssClasses(alert) {\n    if (!alert) return;\n\n    const classes = [\"alert\", \"alert-dismissable\"];\n\n    const alertTypeClass = {\n      [AlertType.Success]: \"alert alert-success\",\n      [AlertType.Error]: \"alert alert-danger\",\n      [AlertType.Info]: \"alert alert-info\",\n      [AlertType.Warning]: \"alert alert-warning\",\n    };\n\n    classes.push(alertTypeClass[alert.type]);\n\n    if (alert.fade) {\n      classes.push(\"fade\");\n    }\n\n    return classes.join(\" \");\n  }\n\n  if (!alerts.length) return null;\n\n  return (\n    <div className=\"container\">\n      <div className=\"m-3\">\n        {alerts.map((alert, index) => (\n          <div key={index} className={cssClasses(alert)}>\n            <a className=\"close\" onClick={() => removeAlert(alert)}>\n              &times;\n            </a>\n            <span dangerouslySetInnerHTML={{ __html: alert.message }}></span>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nShipAlert.propTypes = propTypes;\nShipAlert.defaultProps = defaultProps;\nexport { ShipAlert };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst propTypes = {\n  isShip: PropTypes.bool.isRequired,\n  displayShips: PropTypes.bool.isRequired,\n  isAttacked: PropTypes.bool.isRequired,\n  fire: PropTypes.func.isRequired,\n  index: PropTypes.number.isRequired,\n  display: PropTypes.string.isRequired,\n};\n\nconst OceanBlock = ({\n  isShip,\n  displayShips,\n  isAttacked,\n  fire,\n  index,\n  display,\n}) => {\n  return (\n    <>\n      <div\n        className={`ocean-block ${isShip && displayShips ? `red` : ``} \n        ${isAttacked ? `darkgrey` : ``}`}\n        onClick={() => fire(index)}\n      >\n        {`${display}`}\n      </div>\n    </>\n  );\n};\n\nOceanBlock.propTypes = propTypes;\n\nexport { OceanBlock as OceonShipBlock };\n","import React from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Alert from \"react-bootstrap/Alert\";\nimport PropTypes from \"prop-types\";\n\nconst propTypes = {\n  isInfinitive: PropTypes.bool.isRequired,\n  thereIsActiveShipBlocks: PropTypes.bool.isRequired,\n  currentAttempts: PropTypes.number.isRequired,\n};\n\nconst defaultProps = {\n  isInfinitive: true,\n  thereIsActiveShipBlocks: false,\n  currentAttempts: 0,\n};\n\nconst NotificationSection = ({\n  isInfinitive,\n  thereIsActiveShipBlocks,\n  currentAttempts,\n}) => {\n  return (\n    <>\n      <Row className=\"NotificationSection mb-3\">\n        <Col>\n          {isInfinitive && (\n            <Row className=\"AttempsTitle\">\n              <Col>You have infinitive attempts</Col>\n            </Row>\n          )}\n          {!isInfinitive && thereIsActiveShipBlocks && currentAttempts > 0 && (\n            <Row className=\"AttempsTitle\">\n              <Col>{`You just have ${currentAttempts} attempts`}</Col>\n            </Row>\n          )}\n          <Row>\n            <Col>\n              {!isInfinitive && thereIsActiveShipBlocks && currentAttempts < 1 && (\n                <Alert variant=\"danger\">\n                  <Alert.Heading>You lose the game</Alert.Heading>\n                </Alert>\n              )}\n              {!thereIsActiveShipBlocks && (\n                <Alert variant=\"success\">\n                  <Alert.Heading>You won the game</Alert.Heading>\n                </Alert>\n              )}\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nNotificationSection.defaultProps = defaultProps;\nNotificationSection.propTypes = propTypes;\n\nexport { NotificationSection };\n","import React from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport PropTypes from \"prop-types\";\n\nconst propTypes = {\n  restartGame: PropTypes.func.isRequired,\n};\n\nconst ActionSection = ({ restartGame }) => {\n  return (\n    <>\n      <Row className=\"ActionSection mb-3\">\n        <Col>\n          <Button\n            onClick={restartGame}\n            variant=\"danger\"\n            size=\"lg\"\n            className=\"ml-3\"\n          >\n            Restart Game\n          </Button>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nActionSection.propTypes = propTypes;\n\nexport { ActionSection };\n","import React from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport PropTypes from \"prop-types\";\n\nconst propTypes = {\n  title: PropTypes.string.isRequired,\n  body: PropTypes.string.isRequired,\n  show: PropTypes.bool.isRequired,\n  onCancel: PropTypes.func.isRequired,\n  onAccept: PropTypes.func.isRequired,\n};\n\nconst ShipConfirmation = (props) => {\n  const { show, body, title, onCancel, onAccept } = props;\n  return (\n    <Modal show={show} onHide={onCancel}>\n      <Modal.Header closeButton>\n        <Modal.Title>{title}</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>{body}</Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={onCancel}>\n          Cancel\n        </Button>\n        <Button variant=\"primary\" onClick={onAccept}>\n          Accept\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nShipConfirmation.propTypes = propTypes;\n\nexport { ShipConfirmation };\n","export const initialState = {\n  games: [],\n};\n\nexport const reducer = (state, { type, payload }) => {\n  switch (type) {\n    case \"LOAD_DATA_GAMES\":\n      return {\n        ...state,\n        games: payload,\n      };\n    default:\n      throw new Error();\n  }\n};\n","import React, { createContext, useReducer } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { reducer, initialState } from \"./GlobalReducer\";\n\nconst GlobalContext = createContext({});\n\nconst GlobalContextProvider = (props) => {\n  const { children } = props;\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const loadGames = (games) => {\n    dispatch({ payload: games, type: \"LOAD_DATA_GAMES\" });\n  };\n\n  return (\n    <GlobalContext.Provider\n      value={{\n        loadGames,\n        globalState: state,\n      }}\n    >\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n\nconst { object } = PropTypes;\n\nGlobalContextProvider.defaultProps = {\n  children: {},\n};\n\nGlobalContextProvider.propTypes = {\n  children: object,\n};\n\nexport { GlobalContext, GlobalContextProvider };\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport { alertService } from \"../../services\";\nimport OceanBlock, {\n  abcArray,\n  range,\n  diffBetweenArray,\n} from \"../../Utils/Common\";\nimport {\n  OceonShipBlock,\n  NotificationSection,\n  ActionSection,\n  ShipConfirmation,\n} from \"../../components\";\nimport { GlobalContext } from \"../../GlobalContext\";\nimport \"./GameContainer.css\";\n\nconst GameContainer = () => {\n  const [oceanBlocks, setOceanBlocks] = useState(new Array(100));\n  const [isInfinitive, setIsInfinitive] = useState(true);\n  const [currentAttempts, setCurrentAttempts] = useState(0);\n  const [thereIsActiveShipBlocks, setThereIsActiveShipBlocks] = useState(true);\n  const [displayShips, setDisplayShips] = useState(true);\n  const [showModal, setShowModal] = useState(false);\n  const [modalBody, setModalBody] = useState(\"\");\n  const [gameId, setGameId] = useState(0);\n  const { loadGames, globalState } = useContext(GlobalContext);\n  const { attemptsParam, showShips } = useParams();\n  const attempts = +attemptsParam;\n  const alertOptions = {\n    autoClose: true,\n    keepAfterRouteChange: false,\n  };\n\n  const IterateShipContainers = (Containers, BlockUniverse) => {\n    for (let index = 0; index < Containers.length; index++) {\n      const container = Containers[index];\n      IterateShips(container, BlockUniverse, index);\n    }\n  };\n\n  const IterateShips = (Ships, BlockUniverse, SuperName) => {\n    for (let index = 0; index < Ships.length; index++) {\n      const Ship = Ships[index];\n      setShipProperties(Ship, BlockUniverse, SuperName, index);\n    }\n  };\n\n  const setShipProperties = (shipBlocks, BlockUniverse, SuperName, SubName) => {\n    for (let index = 0; index < shipBlocks.length; index++) {\n      const blockIndex = shipBlocks[index];\n      BlockUniverse[blockIndex].isShip = true;\n      BlockUniverse[blockIndex].isActiveShip = true;\n      BlockUniverse[\n        blockIndex\n      ].shipKey = `${SuperName.toString()}S00${SubName.toString()}`;\n    }\n  };\n\n  const GetShipByTailSize = (initialBlocks, tailSize) => {\n    var result = [];\n    var shipSearchingDefaultResult = false;\n\n    while (!shipSearchingDefaultResult) {\n      var spaceStartIndex = Math.floor(Math.random() * 100);\n      var ShipApplicant = range(spaceStartIndex, spaceStartIndex + tailSize);\n      var validationDefaultResult = true;\n      var shipSize = ShipApplicant.length;\n      var validationStep = 0;\n\n      while (validationDefaultResult && shipSize > validationStep) {\n        //check if the array item is between in [0,1,2,3...,99]\n        if (\n          !initialBlocks.some(\n            (block) => block === ShipApplicant[validationStep]\n          )\n        ) {\n          validationDefaultResult = false;\n        }\n\n        var currentStepValue = ShipApplicant[validationStep];\n\n        if (tailSize > 0) {\n          //check if the middle array item is in [10,20,30,40,50,90] and [9,19,29,39,49,59,69,79,89,99]\n          if (tailSize > 1) {\n            if (0 < validationStep && validationStep < shipSize) {\n              if (currentStepValue % 10 === 0 || currentStepValue % 10 === 9) {\n                validationDefaultResult = false;\n              }\n            }\n          } else {\n            if (validationStep == 0 && currentStepValue % 10 === 9) {\n              validationDefaultResult = false;\n            }\n          }\n        }\n\n        validationStep++;\n      }\n\n      if (validationDefaultResult) {\n        result.push(...ShipApplicant);\n        shipSearchingDefaultResult = true;\n      }\n    }\n    return result;\n  };\n\n  const generateGroupOfShips = (count, baseNumbers, size) => {\n    let step = 0;\n    let groupResult = [];\n    let currentBaseNumbers = Array.from(baseNumbers);\n    while (step < count) {\n      groupResult.push(GetShipByTailSize(currentBaseNumbers, size));\n      currentBaseNumbers = Array.from(\n        diffBetweenArray(currentBaseNumbers, groupResult[step])\n      );\n      step++;\n    }\n    return { groupResult, currentBaseNumbers };\n  };\n\n  const generateShipContainers = (BlockUniverse) => {\n    let groupResult = [];\n    let shipSize = 3;\n    let result = {\n      groupResult: [],\n      currentBaseNumbers: Array.from(BlockUniverse),\n    };\n\n    for (let shipAmount = 1; shipAmount <= 4; shipAmount++) {\n      result = Object.create(\n        generateGroupOfShips(shipAmount, result.currentBaseNumbers, shipSize)\n      );\n      groupResult.push(Array.from(result.groupResult));\n      shipSize--;\n    }\n    return groupResult;\n  };\n\n  const addNewGame = (currentAttempts) => {\n    let globalGames = [...globalState.games];\n    const currentId = globalGames.length + 1;\n    setGameId(currentId);\n    const currentGame = {\n      id: currentId,\n      attemps: attempts,\n      restOfAttemps: currentAttempts,\n      thereIsActiveShipBlocks: true,\n    };\n    globalGames.push(currentGame);\n    loadGames([...globalGames]);\n  };\n\n  const load = () => {\n    setThereIsActiveShipBlocks(true);\n    if (parseInt(attempts) === 0) {\n      setIsInfinitive(true);\n    } else {\n      setIsInfinitive(false);\n      setCurrentAttempts(attempts);\n    }\n    setDisplayShips(showShips > 0);\n    addNewGame(parseInt(attempts));\n\n    //this array begins in [0,1,2,3,4,5...,98,99]\n    const groupResult = generateShipContainers(Array.from(Array(100).keys()));\n\n    //this array begins in [0,1,2,3,4,5...,98,99]\n    var initialOceanBlocks = Array.from(Array(100).keys()).map((number) => {\n      let block = new OceanBlock();\n\n      const getRowNameOrderNumber = (base, letterBase, number, block) => {\n        const init = base * 10;\n        if (init <= number && number <= init + 9) {\n          block.rowName = letterBase;\n          block.columNumber = number + 1 - base * 10;\n        }\n        block.index = number;\n      };\n\n      abcArray.forEach((letter, letterIndex) => {\n        getRowNameOrderNumber(letterIndex, letter, number, block);\n      });\n\n      return block;\n    });\n\n    IterateShipContainers(groupResult, initialOceanBlocks);\n\n    setOceanBlocks(initialOceanBlocks);\n  };\n\n  useEffect(() => {\n    load();\n  }, []);\n\n  const findDestroyShip = (blockUniverse, currentBlock) => {\n    for (let index = 0; index < blockUniverse.length; index++) {\n      const block = blockUniverse[index];\n      if (block.shipKey === currentBlock.shipKey) {\n        block.isAttacked = true;\n        block.isActiveShip = false;\n      }\n    }\n  };\n\n  const updateCurrentGame = (currentAttempts, thereIsActiveShipBlocks) => {\n    let globalGames = [...globalState.games];\n    let currentGame = globalGames[gameId - 1];\n    currentGame.restOfAttemps = currentAttempts;\n    currentGame.thereIsActiveShipBlocks = thereIsActiveShipBlocks;\n    loadGames([...globalGames]);\n  };\n\n  const fire = (index) => {\n    if (!isInfinitive && currentAttempts === 0) {\n      const loseMessage =\n        \"You do not have more shots!!. Would you like to restart the game?\";\n      alertService.error(loseMessage, alertOptions);\n      setModalBody(loseMessage);\n      handleShowModal();\n      return false;\n    }\n\n    let newOceanBlocks = Array.from(oceanBlocks);\n    let currentBlock = newOceanBlocks[index];\n    let stepAttempts = currentAttempts;\n\n    if (!currentBlock.isAttacked) {\n      if (currentBlock.isShip) {\n        findDestroyShip(newOceanBlocks, currentBlock);\n        alertService.info(\"ship destroyed!!\", alertOptions);\n      } else {\n        currentBlock.isAttacked = true;\n        alertService.warn(\"you failed the shot!!\", alertOptions);\n      }\n      if (!isInfinitive) {\n        stepAttempts = currentAttempts - 1;\n        setCurrentAttempts(stepAttempts);\n      }\n    } else {\n      alertService.warn(\"This area was atacked!!\", alertOptions);\n    }\n\n    const currentThereIsActiveShips = newOceanBlocks.some(\n      (block) => block.isActiveShip\n    );\n    setThereIsActiveShipBlocks(currentThereIsActiveShips);\n\n    if (!currentThereIsActiveShips) {\n      const winMessage =\n        \"you won the game!!. Would you like to restart the game?\";\n      alertService.success(winMessage, alertOptions);\n      setModalBody(winMessage);\n      handleShowModal();\n    }\n\n    setOceanBlocks(newOceanBlocks);\n\n    updateCurrentGame(stepAttempts, currentThereIsActiveShips);\n  };\n\n  const restartGame = () => {\n    load();\n  };\n\n  const handleClose = () => setShowModal(false);\n  const handleShowModal = () => setShowModal(true);\n  const handleAcceptModal = () => {\n    setShowModal(false);\n    restartGame();\n  };\n\n  return (\n    <>\n      <Row>\n        <ShipConfirmation\n          show={showModal}\n          body={modalBody}\n          title=\"Finished Game\"\n          onCancel={handleClose}\n          onAccept={handleAcceptModal}\n        />\n      </Row>\n      <Row className=\"GameContainer mt-4\">\n        <Col>\n          <ActionSection restartGame={restartGame} />\n          <NotificationSection\n            isInfinitive={isInfinitive}\n            thereIsActiveShipBlocks={thereIsActiveShipBlocks}\n            currentAttempts={currentAttempts}\n          />\n          <Card style={{ padding: \"1rem\" }}>\n            <div className=\"ocean-container\">\n              {oceanBlocks.map((block) => (\n                <OceonShipBlock\n                  key={block.index}\n                  {...block}\n                  fire={fire}\n                  displayShips={displayShips}\n                  display={block.Display()}\n                />\n              ))}\n            </div>\n          </Card>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default GameContainer;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Table from \"react-bootstrap/Table\";\nimport { GlobalContext } from \"../../GlobalContext\";\n\nconst RecordsContainer = () => {\n  const [games, setGames] = useState([]);\n  const { globalState } = useContext(GlobalContext);\n  useEffect(() => {\n    setGames([...globalState.games.slice(0).reverse()]);\n  }, []);\n  return (\n    <>\n      <Row>\n        <Col>\n          <Table striped bordered hover>\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>Level</th>\n                <th>Attemps</th>\n                <th>Rest Of Attemps</th>\n                <th>Completed Game</th>\n              </tr>\n            </thead>\n            <tbody>\n              {games.map((game) => (\n                <tr key={game.id}>\n                  <td>{game.id}</td>\n                  <td>\n                    {game.attemps === 0\n                      ? \"easy\"\n                      : game.attemps === 100\n                      ? \"medium\"\n                      : game.attemps === 50\n                      ? \"hard\"\n                      : \"Other\"}\n                  </td>\n                  <td>{game.attemps}</td>\n                  <td>{game.restOfAttemps}</td>\n                  <td>{(!game.thereIsActiveShipBlocks).toString()}</td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default RecordsContainer;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Nav from \"react-bootstrap/Nav\";\nimport SettingContainer from \"./containers/SettingContainer/SettingContainer\";\nimport GameContainer from \"./containers/GameContainer/GameContainer\";\nimport RecordsContainer from \"./containers/RecordsContainer/RecordsContainer\";\nimport { ShipAlert } from \"./components\";\nimport { GlobalContextProvider } from \"./GlobalContext\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <GlobalContextProvider>\n      <Router>\n        <Container fluid>\n          <Nav defaultActiveKey=\"/\" as=\"ul\">\n            <Nav.Item as=\"li\">\n              <Link to=\"/\" className=\"nav-link\">\n                Setting\n              </Link>\n            </Nav.Item>\n            <Nav.Item as=\"li\">\n              <Link to=\"/records\" className=\"nav-link\">\n                Records\n              </Link>\n            </Nav.Item>\n          </Nav>\n          <Row>\n            <Col>\n              <Switch>\n                <Route path=\"/game/:attemptsParam/:showShips\">\n                  <GameContainer />\n                </Route>\n                <Route path=\"/records/\">\n                  <RecordsContainer />\n                </Route>\n                <Route path=\"/\">\n                  <SettingContainer />\n                </Route>\n              </Switch>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <ShipAlert />\n            </Col>\n          </Row>\n        </Container>\n      </Router>\n    </GlobalContextProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}